@*
 * Author: Jamie Parker - ST10257863
 * Date: 10 September 2024
 * Project: Contract Monthly Claim System (CMCS)
 *
 * Reference(s):
 * - Microsoft. (2023). Introduction to ASP.NET Core.
 *   Retrieved from https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-8.0
 *   [Accessed: 10 September 2024].
 *@
@{
	ViewData["Title"] = "Claims";
}
<link rel="stylesheet" href="~/css/styles.css" />

<div class="background center-content gap-32">
	<!-- Form Section -->
	<div class="flex-column center-content gap-32">
		<!-- Input Fields Frame -->
		<div class="flex-column gap-32 center-content">

			<!-- Hours Worked Input -->
			<div class="input-field">
				<label for="hoursWorked" class="text-bold">Hours Worked</label>
				<input type="text" id="hoursWorked" name="hoursWorked" class="input-box" placeholder="Enter hours worked" aria-label="Hours Worked" />
			</div>

			<!-- Overtime Worked Input -->
			<div class="input-field">
				<label for="overtimeWorked" class="text-bold">Overtime Worked</label>
				<input type="text" id="overtimeWorked" name="overtimeWorked" class="input-box" placeholder="Enter overtime worked" aria-label="Overtime Worked" />
			</div>

			<!-- Hourly Rate Input -->
			<div class="input-field">
				<label for="hourlyRateInput" class="text-bold">Hourly Rate (R)</label>
				<input type="text" id="hourlyRateInput" name="hourlyRateInput" class="input-box" placeholder="Enter Hourly Rate" aria-label="Hourly Rate" />
			</div>


			<!-- Document Upload -->
			<div class="input-field">
				<label for="document" class="text-bold">Upload Document</label>
				<input type="file" id="document" name="document" class="input-box" aria-label="Upload Document" accept=".pdf,.doc,.docx,.xlsx" onchange="validateFile()" />
			</div>
		</div>

		<!-- Calculation Results -->
		<div class="center-content-start">
			<div class="flex-row center-content-start">
				<div class="flex-column gap-32">
					<label for="regularPay" class="text-bold">Regular Pay:</label>
					<label for="overtimePay" class="text-bold">Overtime Pay:</label>
					<label for="totalPay" class="text-bold">Total Pay:</label>
				</div>
				<div class="flex-column gap-32">
					<div id="regularPay" class="text-regular regular-pay-number"> </div>
					<div id="overtimePay" class="text-regular regular-pay-number"> </div>
					<div id="totalPay" class="text-regular regular-pay-number"> </div>
				</div>
			</div>
		</div>

		<!-- Action Buttons -->
		<div class="flex-row gap-32 center-content">
			<button onclick="calculatePay()" class="submit-button accept-button">Calculate Pay</button>
			<button onclick="submitClaim()" class="submit-button reject-button">Submit Claim</button>
		</div>
	</div>

	<!-- Lecturer Details Frame -->
	<div class="center-content-start gap-32">
		<div class="flex-column flex-grow-1">
			<div class="flex-row center-content-start">
				<div class="flex-column gap-32">
					<label for="lectureId" class="text-bold">Lecture ID:</label>
					<label for="userName" class="text-bold">User Name:</label>
					<label for="fullName" class="text-bold">Full Name:</label>
					<label for="hourlyRate" class="text-bold">Hourly Rate:</label>
					<label for="department" class="text-bold">Department:</label>
					<label for="campus" class="text-bold">Campus:</label>
				</div>

				<div class="flex-column gap-32">
					<div id="lectureId" class="text-regular">N/A</div>
					<div id="userName" class="text-regular">N/A</div>
					<div id="fullName" class="text-regular">N/A</div>
					<div id="hourlyRate" class="text-regular">N/A</div>
					<div id="department" class="text-regular">N/A</div>
					<div id="campus" class="text-regular">N/A</div>
				</div>
			</div>
			<div class="flex-column center-content-start gap-16 height-100">
				<label for="additionalNotes" class="text-bold">Additional Notes</label>
				<div class="input-box-textarea">
					<textarea id="additionalNotes" name="additionalNotes" class="input-box" placeholder="Enter any additional notes." aria-label="Additional Notes"></textarea>
				</div>
			</div>
		</div>
	</div>

	<!-- Claim History -->
	<div class="content-container center-content-start gap-16">
		<p class="text-bold">Previous Claims</p>
		<div class="table-container">
			<table class="table table-bordered table-hover">
				<thead class="thead-light">
					<tr>
						<th>ID</th>
						<th>Date & Time</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody id="table-body">
					<!-- Rows will be dynamically inserted by JavaScript -->
				</tbody>
			</table>
		</div>
	</div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	$(document).ready(function () {
		fetchLecturerDetails(); // Fetch Lecturer Details
		populateClaimsTable(); // Populate the claims table on page load
	});

	// Function to submit the claim via AJAX
	function submitClaim() {
		const hoursWorked = parseFloat($('#hoursWorked').val());
		const overtimeWorked = parseFloat($('#overtimeWorked').val());
		let lecturerNotes = $('#additionalNotes').val();
		let hourlyRate = parseFloat($('#hourlyRateInput').val()); // Correctly get the hourly rate input

		if (!lecturerNotes) {
			lecturerNotes = "No note given";
		}

		if (!overtimeWorked) {
			overtimeWorked = 0;
		}

		if (hourlyRate <= 0) {
			hourlyRate = -1;
		}

		const formData = new FormData();

		// Get all documents selected by the user
		const documents = $('#document')[0].files;
		for (let i = 0; i < documents.length; i++) {
			formData.append('documents', documents[i]); // Append each document to formData
		}

		// Append other form fields
		formData.append('hoursWorked', hoursWorked);
		formData.append('overtimeWorked', overtimeWorked);
		formData.append('lecturerNotes', lecturerNotes);
		formData.append('hourlyRate', hourlyRate); // Append the hourly rate to the form data

		$.ajax({
			url: '/Claims/SubmitClaim',
			method: 'POST',
			data: formData,
			processData: false, // Prevent jQuery from processing data
			contentType: false, // Prevent jQuery from setting content type
			success: function (response) {
				if (response.success) {
					alert(response.message);

					// After claim submission, trigger file upload if documents were submitted
					if (documents.length > 0) {
						const claimId = response.claimId; // Get the claimId from the response
						uploadFilesToClaim(claimId, documents); // Pass claimId to the upload function
					}

					populateClaimsTable(); // Refresh the claims table after submission
				} else {
					alert(response.message);
				}
			},
			error: function (err) {
				console.error('Error submitting claim:', err);
				alert('An error occurred while submitting the claim.');
			}
		});
	}

	// Function to upload files after claim submission
	function uploadFilesToClaim(claimId, documents) {
		const formData = new FormData();

		// Append documents to formData with the claim ID
		for (let i = 0; i < documents.length; i++) {
			formData.append('documents', documents[i]);
		}
		formData.append('claimId', claimId); // Append the claim ID to associate files with the claim

		$.ajax({
			url: '/Claims/UploadFilesToClaim', // Your URL to handle file upload
			method: 'POST',
			data: formData,
			processData: false, // Prevent jQuery from processing data
			contentType: false, // Prevent jQuery from setting content type
			success: function (response) {
				if (response.success) {
					alert('Files uploaded successfully.');
				} else {
					alert('Failed to upload files: ' + response.message);
				}
			},
			error: function (err) {
				console.error('Error uploading files:', err);
				alert('An error occurred while uploading files.');
			}
		});
	}

	function validateFile() {
		const fileInput = document.getElementById('document');
		const file = fileInput.files[0];

		if (file) {
			// Check file size (2MB = 2 * 1024 * 1024 bytes)
			const maxSize = 2 * 1024 * 1024;
			if (file.size > maxSize) {
				alert('File size exceeds the 2MB limit.');
				fileInput.value = '';  // Clear the input
				return false;
			}

			// Check file type
			const validTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
			if (!validTypes.includes(file.type)) {
				alert('Invalid file type. Only PDF, DOC, DOCX, and XLSX are allowed.');
				fileInput.value = '';  // Clear the input
				return false;
			}
		}
		return true;
	}

	function fetchLecturerDetails() {
		$.ajax({
			url: '/Claims/GetLecturerDetails',
			method: 'GET',
			cache: false,
			success: function (data) {
				if (data) {
					loadLecturerDetails(data);
				} else {
					console.error('Lecturer details not found.');
				}
			},
			error: function (err) {
				console.error('Error fetching lecturer details:', err);
			}
		});
	}

	function loadLecturerDetails(data) {
		$('#lectureId').text(data.lecturerId || 'N/A');
		$('#userName').text(data.userName || 'N/A');
		$('#fullName').text(
			(data.firstName || 'N/A') + ' ' + (data.lastName || 'N/A')
		);
		$('#hourlyRate').text('R' + (data.hourlyRate || 0) + '/hr');
		$('#department').text(data.department || 'N/A');
		$('#campus').text(data.campus || 'N/A');
	}

	function populateClaimsTable() {
		$.ajax({
			url: '/Claims/LoadLecturerClaims',
			method: 'GET',
			cache: false,
			success: function (data) {
				if (data && Array.isArray(data) && data.length > 0) {
					renderClaimsTable(data);
				} else {
					console.warn('No claims data found.');
				}
			},
			error: function (err) {
				console.error('Error fetching claims data:', err);
			}
		});
	}

	function renderClaimsTable(claims) {
		claims.sort((a, b) => a.claimId - b.claimId);

		const tableBody = $('#table-body');
		tableBody.empty();

		claims.forEach(claim => {
			const row = document.createElement('tr');
			row.setAttribute('data-id', claim.claimId);

			row.innerHTML = `<td>${claim.claimId}</td><td>${new Date(claim.submissionDate).toLocaleString()}</td><td>${claim.status}</td>`;

			tableBody.append(row);
		});
	}

	function calculatePay() {
		const hoursWorked = parseFloat($('#hoursWorked').val());
		const overtimeWorked = parseFloat($('#overtimeWorked').val());
		let hourlyRateInput = parseFloat($('#hourlyRateInput').val());

		if (isNaN(hoursWorked) || hoursWorked < 0) {
			alert('Please enter a valid number of hours worked.');
			return;
		}

		if (isNaN(overtimeWorked) || overtimeWorked < 0) {
			alert('Please enter a valid number of overtime hours worked.');
			return;
		}

		let hourlyRate = hourlyRateInput || parseFloat($('#hourlyRate').text().replace('R', '').replace('/hr', ''));

		if (isNaN(hourlyRate) || hourlyRate <= 0) {
			alert('Please enter a valid hourly rate.');
			return;
		}

		const regularPay = hoursWorked * hourlyRate;
		const overtimePay = overtimeWorked * hourlyRate * 1.5;
		const totalPay = regularPay + overtimePay;

		$('#regularPay').text('R' + regularPay.toFixed(2));
		$('#overtimePay').text('R' + overtimePay.toFixed(2));
		$('#totalPay').text('R' + totalPay.toFixed(2));
	}
</script>
