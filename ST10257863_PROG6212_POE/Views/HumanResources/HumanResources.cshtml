<div class="background center-content gap-32">
	<div class="flex-column center-content gap-32">
		<!-- Filter Options -->
		<div class="filter-container center-content-start gap-16">
			@* <label for="userIdFilter">Select User ID:</label>
			<select id="userIdFilter" class="form-control">
			<option value="">All Users</option>
			<!-- User IDs will be dynamically populated -->
			</select> *@
			<div class="flex-column center-content gap-16">
				<label for="statusFilter">Select Status:</label>
				<select id="statusFilter" class="form-control">
					<option value="">All Statuses</option>
					<option value="Pending">Pending</option>
					<option value="Approved">Approved</option>
					<option value="Verified">Verified</option>
					<option value="Rejected">Rejected</option>
				</select>
			</div>
			<div class="flex-column center-content gap-16">
				<label for="userIdFilter">Select User ID:</label>
				<select id="userIdFilter" class="form-control">
					<option value="">All Users</option>
					<!-- User IDs will be dynamically populated -->
				</select>
			</div>
			<div class="flex-column center-content gap-16">
				<label for="searchInput">Search:</label>
				<input type="text" id="searchInput" class="form-control" placeholder="Search by Claim ID or Status" />
			</div>
		</div>

		<!-- Claim History -->
		<div class="content-container center-content-start gap-16">
			<p class="text-bold">Previous Claims</p>
			<div class="table-container">
				<table class="table table-bordered table-hover">
					<thead class="thead-light">
					<thead class="thead-light">
						<tr>
							<th>Claim ID</th>
							<th>User ID</th> <!-- New column for User ID -->
							<th>Date & Time</th>
							<th>Status</th>
						</tr>
					</thead>
					</thead>
					<tbody id="table-body">
						<!-- Rows will be dynamically inserted by JavaScript -->
					</tbody>
				</table>
			</div>
		</div>

		<div class="center-content">
			<button onclick="generateReport()" class="submit-button accept-button">Generate Report</button>
		</div>
	</div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	let claimsData = []; // Store all claims data here
	let filteredClaims = []; // Store the currently filtered claims here

	$(document).ready(function () {
		populateClaimsTable(); // Populate the claims table on page load
		populateUserIds(); // Populate the User ID dropdown
	});

	// Function to fetch claims data and populate the table
	function populateClaimsTable() {
		$.ajax({
			url: '/Claims/GetAllClaims',
			method: 'GET',
			cache: false,
			success: function (data) {
				if (data && Array.isArray(data) && data.length > 0) {
					claimsData = data; // Store claims data in the global variable
					filteredClaims = claimsData; // Initially, filtered claims are the same as all claims
					renderClaimsTable(filteredClaims); // Render the table with full data
					populateUserIds(); // Populate User ID dropdown after claims data is available
				} else {
					console.warn('No claims data found.');
				}
			},
			error: function (err) {
				console.error('Error fetching claims data:', err);
			}
		});
	}

	// Function to render claims data in the table
	function renderClaimsTable(claims) {
		claims.sort((a, b) => a.claimId - b.claimId);

		const tableBody = $('#table-body');
		tableBody.empty();

		claims.forEach(claim => {
			const row = document.createElement('tr');
			row.setAttribute('data-id', claim.claimId);
			const submissionDate = new Date(claim.submissionDate).toLocaleString();
			const status = claim.status;
			const userId = claim.userId; // Added UserId for rendering

			// Render the table row with the new UserId column
			row.innerHTML = `<td>${claim.claimId}</td><td>${userId}</td><td>${submissionDate}</td><td>${status}</td>`;
			tableBody.append(row);
		});
	}

	// Function to filter claims data based on user inputs
	function filterClaims() {
		filteredClaims = claimsData;

		const userId = $('#userIdFilter').val();
		const status = $('#statusFilter').val();
		const searchQuery = $('#searchInput').val().toLowerCase();

		console.log('Filtering claims with UserId:', userId, 'Status:', status, 'Search Query:', searchQuery);

		// Filter by User ID
		if (userId) {
			filteredClaims = filteredClaims.filter(claim => claim.userId.toString() === userId);
		}

		// Filter by Status
		if (status) {
			filteredClaims = filteredClaims.filter(claim => claim.status === status);
		}

		// Filter by Search Query (Claim ID or Status)
		if (searchQuery) {
			filteredClaims = filteredClaims.filter(claim =>
				claim.claimId.toString().includes(searchQuery) ||
				claim.status.toLowerCase().includes(searchQuery)
			);
		}

		console.log('Filtered Claims:', filteredClaims);
		renderClaimsTable(filteredClaims); // Update the table with filtered data
	}

	// Function to generate a report
	function generateReport() {
		if (filteredClaims.length === 0) {
			alert('No claims to generate a report.');
			return;
		}

		// Send filtered claims to the server
		$.ajax({
			url: '/Claims/GenerateTextReport',
			method: 'POST',
			contentType: 'application/json',
			data: JSON.stringify(filteredClaims), // Send only the filtered claims
			success: function (response, status, xhr) {
				// Trigger file download
				const url = window.URL.createObjectURL(new Blob([response]));
				const link = document.createElement('a');
				link.href = url;
				const contentDisposition = xhr.getResponseHeader('Content-Disposition');
				const fileName = contentDisposition
					? contentDisposition.split('filename=')[1]
					: 'ClaimReport.txt';
				link.setAttribute('download', fileName);
				document.body.appendChild(link);
				link.click();
				document.body.removeChild(link);
			},
			error: function (err) {
				console.error('Error generating report:', err);
				alert('Failed to generate report.');
			}
		});
	}

	function populateUserIds() {
		const userIdFilter = $('#userIdFilter');

		// Get unique UserIds from the claimsData
		const uniqueUserIds = [...new Set(claimsData.map(claim => claim.userId))];

		// Clear the existing options, if any, and add the "All Users" option
		userIdFilter.empty();
		userIdFilter.append('<option value="">All Users</option>');

		// Add each unique UserId to the dropdown
		uniqueUserIds.forEach(userId => {
			userIdFilter.append(`<option value="${userId}">${userId}</option>`);
		});

		console.log('User IDs available:', uniqueUserIds); // Debug log for available user IDs
	}

	// Event listeners for dropdown changes and search input
	$('#userIdFilter, #statusFilter, #searchInput').on('change keyup', function () {
		filterClaims(); // Apply filters when inputs change
	});

</script>