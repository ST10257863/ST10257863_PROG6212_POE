@*
 * Author: Jamie Parker - ST10257863
 * Date: 10 September 2024
 * Project: Contract Monthly Claim System (CMCS)
 *
 * Reference(s):
 * - Microsoft. (2023). Introduction to ASP.NET Core.
 *   Retrieved from https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-8.0
 *   [Accessed: 10 September 2024].
 *@
@{
	ViewData["Title"] = "Approval";
}
<link rel="stylesheet" href="~/css/styles.css" />

<div class="container">
	<div class="background center-content gap-32">
		<!-- Pending Section -->
		<div class="content-container center-content-start gap-16">
			<p class="text-bold">Previous Claims</p>
			<div class="table-container">
				<table class="table table-bordered table-hover">
					<thead class="thead-light">
						<tr>
							<th>ID</th>
							<th>Date & Time</th>
							<th>Status</th>
						</tr>
					</thead>
					<tbody id="table-body">
						<!-- Rows will be dynamically inserted by JavaScript -->
					</tbody>
				</table>
			</div>
		</div>

		<!-- Details Section -->
		<div class="flex-column center-content-start gap-16 padding-top-16">
			<div class="flex-row center-content-start space-between width-100">
				<div class="flex-row center-content-start gap-32">
					<!-- Labels -->
					<div class="flex-column gap-16">
						<label for="lectureId" class="text-bold">Lecture ID:</label>
						<label for="fullName" class="text-bold">Full Name:</label>
						<label for="hourlyRate" class="text-bold">Hourly Rate:</label>
						<label for="department" class="text-bold">Department:</label>
						<label for="campus" class="text-bold">Campus:</label>
					</div>

					<!-- Content -->
					<div class="flex-column gap-16">
						<div id="lectureId" class="text-regular">TEXT</div>
						<div id="fullName" class="text-regular">TEXT</div>
						<div id="hourlyRate" class="text-regular">TEXT</div>
						<div id="department" class="text-regular">TEXT</div>
						<div id="campus" class="text-regular">TEXT</div>
					</div>
				</div>

				<!-- Manager details section (changed to Coordinator) -->
				<div class="flex-row center-content-start gap-32">
					<!-- Labels -->
					<div class="flex-column gap-16">
						<label for="coordinatorId" class="text-bold">Coordinator ID:</label>
						<label for="coordinatorFullName" class="text-bold">Full Name:</label>
						<label for="coordinatorDepartment" class="text-bold">Department:</label>
						<label for="coordinatorCampus" class="text-bold">Campus:</label>
					</div>

					<!-- Content -->
					<div class="flex-column gap-16">
						<div id="coordinatorId" class="text-regular">TEXT</div>
						<div id="coordinatorFullName" class="text-regular">TEXT</div>
						<div id="coordinatorDepartment" class="text-regular">TEXT</div>
						<div id="coordinatorCampus" class="text-regular">TEXT</div>
					</div>
				</div>
				<div class="flex-column center-content-start gap-16 height-Auto">
					<label for="approvalNotes" class="text-bold">Approval Notes</label>
					<div class="input-box-textarea">
						<textarea id="approvalNotes" name="approvalNotes" class="input-box" placeholder="Additional Notes" aria-label="Additional Notes" /></textarea>
					</div>
				</div>
			</div>

			<!-- Separator Line -->
			<div class="separator-line"></div>

			<div class="flex-row center-content-start gape-32">
				<div class="flex-column center-content-start gape-32">
					<div class="flex-row center-content-start gap-32">
						<!-- Hours Worked -->
						<div class="flex-row center-content-start gap-32">
							<div class="flex-column gap-16">
								<label for="regularHours" class="text-bold">Regular Hours:</label>
								<label for="overtimeHours" class="text-bold">Overtime Hours:</label>
								<label for="totalHours" class="text-bold">Total Hours:</label>
							</div>
							<div class="flex-column gap-16">
								<div id="regularHours" class="text-regular regular-hours-number">NUMBER</div>
								<div id="overtimeHours" class="text-regular overtime-hours-number">NUMBER</div>
								<div id="totalHours" class="text-regular total-hours-number">NUMBER</div>
							</div>
						</div>
					</div>

					<!-- Separator Line -->
					<div class="separator-line"></div>

					<div class="flex-row center-content-start gap-32">
						<!-- Pay Details -->
						<div class="flex-row center-content-start gap-32">
							<div class="flex-column gap-16">
								<label for="regularPay" class="text-bold">Regular Pay:</label>
								<label for="overtimePay" class="text-bold">Overtime Pay:</label>
								<label for="totalPay" class="text-bold">Total Pay:</label>
							</div>
							<div class="flex-column gap-16">
								<div id="regularPay" class="text-regular regular-pay-number">NUMBER</div>
								<div id="overtimePay" class="text-regular overtime-pay-number">NUMBER</div>
								<div id="totalPay" class="text-regular total-pay-number">NUMBER</div>
							</div>
						</div>
					</div>
				</div>

				<div class="flex-column center-content-start gap-16 height-Auto">
					<label for="lecturerNotes" class="text-bold">Lecturer Notes</label>
					<div class="input-box-textarea">
						<textarea id="lecturerNotes" name="lecturerNotes" class="input-box" placeholder="Lecturer Notes" aria-label="Lecturer Notes" readonly></textarea>
					</div>
				</div>
				<div class="flex-column center-content-start gap-16 height-Auto">
					<label for="managerNotes" class="text-bold">Manager Notes</label>
					<div class="input-box-textarea">
						<textarea id="managerNotes" name="managerNotes" class="input-box" placeholder="Manager Notes" aria-label="Manager Notes" readonly /></textarea>
					</div>
				</div>
			</div>
			<!-- Action Buttons -->
			<div class="flex-row gap-32 center-content">
				<button onclick="approveClaim()" class="submit-button accept-button">APPROVE</button>
				<button onclick="rejectClaim()" class="submit-button reject-button">REJECT</button>
			</div>
		</div>
		<input type="hidden" id="hiddenClaimId" value="" />
	</div>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	function populateTable() {
		fetch('/Claims/GetAllVerifiedClaims')
			.then(response => response.json())
			.then(data => {
				// Sort the claims by claimId in ascending order
				data.sort((a, b) => a.claimId - b.claimId);

				const tableBody = document.getElementById('table-body');
				tableBody.innerHTML = ''; // Clear existing rows

				data.forEach(claim => {
					const row = document.createElement('tr');
					// Set the correct attribute for 'claimId'
					row.setAttribute('data-id', claim.claimId);  // Update to use 'claimId' in camelCase
					row.setAttribute('onclick', 'updateDetails(this)');

					// Use 'claimId', 'submissionDate', and format the date as required
					row.innerHTML = `<td>${claim.claimId}</td><td>${new Date(claim.submissionDate).toLocaleString()}</td><td>${claim.status}</td>`;

					tableBody.appendChild(row);
				});
			})
			.catch(error => console.error('Error fetching claims:', error));
	}

	function updateDetails(row) {
		const claimId = row.getAttribute('data-id');
		fetch(`/Claims/GetClaimDetails/${claimId}`)
			.then(response => {
				if (!response.ok) {
					throw new Error(`Error fetching claim details: ${response.statusText}`);
				}
				return response.json();
			})
			.then(data => {
				// Populate lecturer details
				document.getElementById('lectureId').innerText = data.lecturerId;
				document.getElementById('fullName').innerText = data.fullName;
				document.getElementById('hourlyRate').innerText = "R" + data.hourlyRate;
				document.getElementById('department').innerText = data.department;
				document.getElementById('campus').innerText = data.campus;
				document.getElementById('regularHours').innerText = data.regularHours;
				document.getElementById('overtimeHours').innerText = data.overtimeHours;
				document.getElementById('totalHours').innerText = data.totalHours;
				document.getElementById('regularPay').innerText = data.regularPay;
				document.getElementById('overtimePay').innerText = data.overtimePay;
				document.getElementById('totalPay').innerText = data.totalPay;
				document.getElementById('lecturerNotes').value = data.lecturerNotes; // Update lecturerNotes textarea

				// Populate coordinator details
				document.getElementById('coordinatorId').innerText = data.coordinatorId;
				document.getElementById('coordinatorFullName').innerText = data.coordinatorFullName;
				document.getElementById('coordinatorDepartment').innerText = data.coordinatorDepartment;
				document.getElementById('coordinatorCampus').innerText = data.coordinatorCampus;


				// Populate manager notes in the managerNotes textarea
				document.getElementById('managerNotes').value = data.verificationComments; // Update managerNotes textarea

				// Store approvalId in hidden input field
				document.getElementById('hiddenClaimId').value = claimId;
			})
			.catch(error => {
				console.error('Error fetching verified claim details:', error);
			});
	}


	function approveClaim() {
		const claimId = document.getElementById('hiddenClaimId').value;
		const approvalNotes = document.getElementById('approvalNotes').value;

		// Check if a claim has been selected
		if (!claimId) {
			alert('Please select a claim first.');
			return;
		}

		// Check if the approval notes are provided and within the 500 character limit
		if (!approvalNotes.trim()) {
			alert('Please enter approval notes.');
			return;
		}

		if (approvalNotes.length > 500) {
			alert('Verification notes cannot exceed 500 characters.');
			return;
		}

		// Make the AJAX POST request
		$.ajax({
			url: '/Approval/ApproveClaim',
			type: 'POST',
			data: {
				claimId: claimId,
				approvalComment: approvalNotes // Correctly send notes
			},
			success: function () {
				alert('Claim Approved successfully!');
				populateTable(); // Refresh the table
			},
			error: function (xhr) {
				alert(`Error Approving claim: ${xhr.responseText}`);
			}
		});
	}

	function rejectClaim() {
		const claimId = document.getElementById('hiddenClaimId').value;
		const approvalNotes = document.getElementById('approvalNotes').value;

		// Check if a claim has been selected
		if (!claimId) {
			alert('Please select a claim first.');
			return;
		}

		// Check if the approval notes are provided and within the 500 character limit
		if (!approvalNotes.trim()) {
			alert('Please enter approval notes.');
			return;
		}

		if (approvalNotes.length > 500) {
			alert('Verification notes cannot exceed 500 characters.');
			return;
		}

		// Make the AJAX POST request
		$.ajax({
			url: '/Approval/RejectClaim',
			type: 'POST',
			data: {
				claimId: claimId,
				approvalComment: approvalNotes // Correctly send notes
			},
			success: function () {
				alert('Claim Rejected');
				populateTable(); // Refresh the table
			},
			error: function (xhr) {
				alert(`Error Rejecting claim: ${xhr.responseText}`);
			}
		});
	}

	// Populate the table on page load
	document.addEventListener('DOMContentLoaded', populateTable);
</script>

